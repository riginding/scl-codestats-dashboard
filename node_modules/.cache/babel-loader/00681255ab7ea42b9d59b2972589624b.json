{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/ryan/programming/now_test/pages/index.js\";\nimport React from \"react\";\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\nimport { BarChart, Bar, XAxis } from 'recharts';\nvar data = [{\n  name: 'Page A',\n  uv: 4000,\n  pv: 2400,\n  amt: 2400\n}, {\n  name: 'Page B',\n  uv: 3000,\n  pv: 1398,\n  amt: 2210\n}, {\n  name: 'Page C',\n  uv: 2000,\n  pv: 9800,\n  amt: 2290\n}, {\n  name: 'Page D',\n  uv: 2780,\n  pv: 3908,\n  amt: 2000\n}, {\n  name: 'Page E',\n  uv: 1890,\n  pv: 4800,\n  amt: 2181\n}, {\n  name: 'Page F',\n  uv: 2390,\n  pv: 3800,\n  amt: 2500\n}, {\n  name: 'Page G',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}];\n\nvar renderLineChart = function renderLineChart() {\n  return React.createElement(BarChart, {\n    width: 500,\n    height: 300,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(XAxis, {\n    dataKey: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(Bar, {\n    dataKey: \"uv\",\n    fill: \"#82ca9d\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }));\n};\n\nvar Index = function Index(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, renderLineChart(), props.data.map(function (userStats) {\n    return React.createElement(\"div\", {\n      key: userStats.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, userStats.name), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, userStats.totalXP));\n  }));\n};\n\nIndex.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var userNames, fetchData, userStats;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          userNames = ['riginding', 'madfist', 'theanswer'];\n          _context.next = 3;\n          return _Promise.all(userNames.map(function (user) {\n            return fetch(\"https://codestats.net/api/users/\".concat(user));\n          }));\n\n        case 3:\n          fetchData = _context.sent;\n          _context.next = 6;\n          return _Promise.all(fetchData.map(function (userData) {\n            return userData.json();\n          }));\n\n        case 6:\n          userStats = _context.sent;\n          userStats = userStats.map(function (stat) {\n            return {\n              name: stat.user,\n              totalXP: stat.total_xp\n            };\n          }).sort((self, other) + self.totalXP - other.totalXP);\n          return _context.abrupt(\"return\", {\n            data: userStats\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;","map":{"version":3,"sources":["/Users/ryan/programming/now_test/pages/index.js"],"names":["Link","fetch","BarChart","Bar","XAxis","data","name","uv","pv","amt","renderLineChart","top","right","left","bottom","Index","props","map","userStats","totalXP","getInitialProps","userNames","all","user","fetchData","userData","json","stat","total_xp","sort","self","other"],"mappings":"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","sourcesContent":["import Link from 'next/link'\nimport fetch from 'isomorphic-unfetch'\nimport {\n  BarChart, Bar, XAxis\n} from 'recharts';\n\nconst data = [\n  {\n    name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\n  },\n  {\n    name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\n  },\n  {\n    name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\n  },\n  {\n    name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\n  },\n  {\n    name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\n  },\n  {\n    name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\n  },\n  {\n    name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\n  },\n];\nconst renderLineChart = () => (\n      <BarChart\n        width={500}\n        height={300}\n        data={data}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <XAxis dataKey=\"name\" />\n        <Bar dataKey=\"uv\" fill=\"#82ca9d\" />\n      </BarChart>\n  );\n  \n\nconst Index = (props) => (\n  <div>\n    {renderLineChart()}\n\n     { props.data.map(userStats =>\n     (<div key={userStats.name}>\n       <h1>{userStats.name}</h1>\n       <h2>{userStats.totalXP}</h2>\n     </div>)\n      )}\n  </div>\n)\n\nIndex.getInitialProps = async function() {\n  const userNames = ['riginding', 'madfist', 'theanswer']\n  const fetchData = await Promise.all(userNames.map(user => fetch(`https://codestats.net/api/users/${user}`)))\n  let userStats = await Promise.all(fetchData.map((userData) => { \n    return userData.json()\n  }))\n  userStats = userStats.map(stat => {\n    return {\n      name: stat.user,\n      totalXP: stat.total_xp\n    }\n  }).sort((self,other)+ self.totalXP - other.totalXP)\n\n  return {\n    data: userStats\n  }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}